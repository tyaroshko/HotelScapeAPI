{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HotelScape HotelScape is created for hotel administrators and receptionists who want to effectively manage the typical hotel workflow. Visit github.com to checkout the project code. Users have the ability to interact with rooms, manage clients and create bookings and invoices. Sections Installation Project layout","title":"Home"},{"location":"#hotelscape","text":"HotelScape is created for hotel administrators and receptionists who want to effectively manage the typical hotel workflow. Visit github.com to checkout the project code. Users have the ability to interact with rooms, manage clients and create bookings and invoices.","title":"HotelScape"},{"location":"#sections","text":"","title":"Sections"},{"location":"#installation","text":"","title":"Installation"},{"location":"#project-layout","text":"","title":"Project layout"},{"location":"about/","text":"Fuit longo Spectacula viae iacet in brevis vixque","title":"About"},{"location":"about/#fuit-longo","text":"","title":"Fuit longo"},{"location":"about/#spectacula-viae-iacet-in-brevis-vixque","text":"","title":"Spectacula viae iacet in brevis vixque"},{"location":"installation/","text":"Correct installation of the package: Create a virtual environment and activate it cd hotel-api python3 -m venv venv source venv/bin/activate Install Poetry to manage all dependencies pip install poetry (However, you can install it without pip if you want) curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - Install all dependencies poetry install Create a .env file # Here's an example POSTGRES_USER = \"user\" POSTGRES_PASSWORD = \"password\" POSTGRES_SERVER = \"localhost\" POSTGRES_DATABASE = \"database\" POSTGRES_TEST_DATABASE = \"test-database\" ALGORITHM = \"algorithm\" JWT_SECRET_KEY = \"jwt_secret_key\" JWT_REFRESH_SECRET_KEY = \"jwt_refresh_secret_key\" Create a working database with Alembic alembic revision --autogenerate alembic upgrade head Run the app visually Swagger UI uvicorn main:app --reload","title":"Installation"},{"location":"installation/#correct-installation-of-the-package","text":"","title":"Correct installation of the package:"},{"location":"installation/#create-a-virtual-environment-and-activate-it","text":"cd hotel-api python3 -m venv venv source venv/bin/activate","title":"Create a virtual environment and activate it"},{"location":"installation/#install-poetry-to-manage-all-dependencies","text":"pip install poetry","title":"Install Poetry to manage all dependencies"},{"location":"installation/#however-you-can-install-it-without-pip-if-you-want","text":"curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -","title":"(However, you can install it without pip if you want)"},{"location":"installation/#install-all-dependencies","text":"poetry install","title":"Install all dependencies"},{"location":"installation/#create-a-env-file","text":"# Here's an example POSTGRES_USER = \"user\" POSTGRES_PASSWORD = \"password\" POSTGRES_SERVER = \"localhost\" POSTGRES_DATABASE = \"database\" POSTGRES_TEST_DATABASE = \"test-database\" ALGORITHM = \"algorithm\" JWT_SECRET_KEY = \"jwt_secret_key\" JWT_REFRESH_SECRET_KEY = \"jwt_refresh_secret_key\"","title":"Create a .env file"},{"location":"installation/#create-a-working-database-with-alembic","text":"alembic revision --autogenerate alembic upgrade head","title":"Create a working database with Alembic"},{"location":"installation/#run-the-app-visually-swagger-ui","text":"uvicorn main:app --reload","title":"Run the app visually Swagger UI"},{"location":"project_layout/","text":"Project layout All the files included in the project: mkdocs.yml # Configuration file for mkdocs. main.py # Main module which includes all the endpoints. db.py # Configuration file user for creating a database session. alembic.ini # Alembic config file when initializing poetry.lock # File with all Poetry dependencies that are needed pyproject.toml # File with all necessary info about the project README.md # A usual README file .pre-commit-config.yaml # File with all pre commit hooks auth/ deps.py # File with dependencies needed for user auth. utils.py # Includes reusable functions to help with user login crud/ room_utils.py # Includes CRUD functions for data associated with rooms booking_utils # Includes CRUD functions for data associated with bookings ... # Other files with CRUD logic docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. migrations/ versions/ # Folder with all alembic migrations ... # Alembic version files env.py # Configuration file for Alembic models/ booking.py # Represents a model for db table Booking ... # Other files that represent models for the tables routers/ room_routers.py # Stores all the endpoints for interactions with Room ... # Other files with all the endpoints schemas/ booking_schemas # Pydantic schemas for correct response models in endpoints ... # Other files with Pydantic schemas tests/ test_auth.py # File for testing user auth ... # Other files that test the app behavior on endpoints","title":"Project layout"},{"location":"project_layout/#project-layout","text":"All the files included in the project: mkdocs.yml # Configuration file for mkdocs. main.py # Main module which includes all the endpoints. db.py # Configuration file user for creating a database session. alembic.ini # Alembic config file when initializing poetry.lock # File with all Poetry dependencies that are needed pyproject.toml # File with all necessary info about the project README.md # A usual README file .pre-commit-config.yaml # File with all pre commit hooks auth/ deps.py # File with dependencies needed for user auth. utils.py # Includes reusable functions to help with user login crud/ room_utils.py # Includes CRUD functions for data associated with rooms booking_utils # Includes CRUD functions for data associated with bookings ... # Other files with CRUD logic docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. migrations/ versions/ # Folder with all alembic migrations ... # Alembic version files env.py # Configuration file for Alembic models/ booking.py # Represents a model for db table Booking ... # Other files that represent models for the tables routers/ room_routers.py # Stores all the endpoints for interactions with Room ... # Other files with all the endpoints schemas/ booking_schemas # Pydantic schemas for correct response models in endpoints ... # Other files with Pydantic schemas tests/ test_auth.py # File for testing user auth ... # Other files that test the app behavior on endpoints","title":"Project layout"}]}